-- SQL Server
-- Ejercicios Entrevistas 2

-- 1- Cuales son las ciudades donde la afluencia de turistas es continuamente creciente
create schema test;

drop table if exists test.curso_turistas;

create table test.curso_turistas (city varchar(50),days date,personas int);

insert into test.curso_turistas values('CABA','2022-01-01',100);
insert into test.curso_turistas values('CABA','2022-01-02',200);
insert into test.curso_turistas values('CABA','2022-01-03',300);
insert into test.curso_turistas values('Cordoba','2022-01-01',100);
insert into test.curso_turistas values('Cordoba','2022-01-02',100);
insert into test.curso_turistas values('Cordoba','2022-01-03',300);
insert into test.curso_turistas values('Madrid','2022-01-01',100);
insert into test.curso_turistas values('Madrid','2022-01-02',200);
insert into test.curso_turistas values('Madrid','2022-01-03',150);
insert into test.curso_turistas values('Punta del Este','2022-01-01',100);
insert into test.curso_turistas values('Punta del Este','2022-01-02',300);
insert into test.curso_turistas values('Punta del Este','2022-01-03',200);
insert into test.curso_turistas values('Punta del Este','2022-01-04',400);

with turistas as (
select
	city, 
	days,
	personas,
	case when last_value(personas) over (partition by city order by days) > lag(personas) over(partition by city order by days)
	then 1 else 0 end as creciente
from test.curso_turistas
)
, cont_creciente as (
select 
	city,
	case when sum(creciente) = count(*)-1 then 'si' else 'no' end as continuamente_creciente
from 
	turistas
group by 
	city
)
select 
	city 
from 
	cont_creciente
where 
	continuamente_creciente = 'si'

-- 2- Encontrar a los empleados cuyo salario es mayor que el de su manager
drop table if exists test.curso_empleados ;

create table test.curso_empleados (emp_id int, empleado varchar(50), salario bigint, manager_id int);

insert into test.curso_empleados values (1,'Clara',10000,4);
insert into test.curso_empleados values (2,'Pedro',15000,5);
insert into test.curso_empleados values (3,'Daniel',10000,4);
insert into test.curso_empleados values (4,'Hernan',5000,2);
insert into test.curso_empleados values (5,'Debora',12000,6);
insert into test.curso_empleados values (6,'Ricardo',12000,2);
insert into test.curso_empleados values (7,'Luciano',9000,2);
insert into test.curso_empleados values (8,'Romina',5000,2);

with manager as (
select 
	*,
	case when manager_id = 2 then (select salario from test.curso_empleados where emp_id = 2)
	when manager_id = 4 then (select salario from test.curso_empleados where emp_id = 4)
	when manager_id = 5 then (select salario from test.curso_empleados where emp_id = 5) 
	when manager_id = 6 then (select salario from test.curso_empleados where emp_id = 6)
	end as salario_manager
from 
	test.curso_empleados
)
select 
	empleado 
from 
	manager
where 
	salario > salario_manager

-- 3- Encontrar el player_id ganador de cada grupo. El ganador es aquel que anota mas puntos (score) en caso de empate, 
-- el que tenga menor player_id gana.
drop table if exists test.curso_players;

create table test.curso_players (player_id int, grupo varchar(1));

insert into test.curso_players values (15,'A');
insert into test.curso_players values (25,'A');
insert into test.curso_players values (30,'A');
insert into test.curso_players values (45,'A');
insert into test.curso_players values (10,'B');
insert into test.curso_players values (35,'B');
insert into test.curso_players values (50,'B');
insert into test.curso_players values (20,'C');
insert into test.curso_players values (40,'C');

create table test.curso_matches (match_id int, first_player int, second_player int, first_score int, second_score int);

insert into test.curso_matches values (1,15,45,3,0);
insert into test.curso_matches values (2,30,25,1,2);
insert into test.curso_matches values (3,30,15,2,0);
insert into test.curso_matches values (4,40,20,5,2);
insert into test.curso_matches values (5,35,50,1,1);

with players_score as (
select 
	sum(first_score) as score, 
	first_player as player_id 
from 
	test.curso_matches 
group by
	first_player
union all
select 
	sum(second_score) as score,
	second_player as player_id 
from 
	test.curso_matches
group by
	second_player
)
, grupo_players_score as (
select
	grupo, 
	pc.player_id,
	sum(score) as score
from 
	players_score pc
left join 
	test.curso_players tp on pc.player_id = tp.player_id
group by 
	grupo, pc.player_id
)
, ranking AS (
select
	grupo,
	player_id,
	score,
	row_number() over (partition by grupo order by score desc, player_id asc) as ranking
from
	grupo_players_score
)
select
    grupo,
    player_id,
    score
from ranking
where ranking = 1
