-- SQL Server
-- Ejercicios entrevista 3

-- 1- Armar una tabla con el id del empleado y una columna que represente si el empleado "Ascendio" , "Renuncio", o se "Incorporo". 
-- En caso de no haber cambios, no mostrarlo. 
-- Un empleado renuncia cuando esta el primer a침o y no el segundo, y viceversa para cuando un empleado se incorpora.

create table test.curso_emp_2022
( 	emp_id int,
	designation varchar(20));

create table test.curso_emp_2023
( 	emp_id int,
	designation varchar(20));

insert into test.curso_emp_2022 values (1,'Trainee'), (2,'Developer'),(3,'Senior Developer'),(4,'Manager');
insert into test.curso_emp_2023 values (1,'Developer'), (2,'Developer'),(3,'Manager'),(5,'Trainee');

----------------------------------------------------------------------------------------------------------

select 
	case
        when ce2.emp_id is not null then ce2.emp_id
        else ce3.emp_id
    end as empleado_id,
    case 
        when ce2.designation is null then 'Incorpor칩'
        when ce3.designation is null then 'Renunci칩'
		else 'Ascendi칩'
    end as cambios
from test.curso_emp_2022 ce2
full outer join test.curso_emp_2023 ce3 on ce2.emp_id = ce3.emp_id
where not (ce2.designation = ce3.designation)
	  or ce2.designation is null
	  or ce3.designation is null

-- 2- Encontrar para cada dia, cuantas ordenes fueron hechas por clientes nuevos ("first_purchase") y cuantas fueron hechas por clientes 
-- que ya habian comprado ("repeat_customer"). Este es un concepto que se utiliza mucho en cualquier empresa para entender la capacidad 
-- de generar clientes nuevos o de retener los existentes.

create table test.curso_orders (
	order_id integer,
	customer_id integer,
	order_date date,
	order_amount integer
	);

insert into test.curso_orders values
 (1,100,cast('2022-01-01' as date),2000)
,(2,200,cast('2022-01-01' as date),2500)
,(3,300,cast('2022-01-01' as date),2100)
,(4,100,cast('2022-01-02' as date),2000)
,(5,400,cast('2022-01-02' as date),2200)
,(6,500,cast('2022-01-02' as date),2700)
,(7,100,cast('2022-01-03' as date),3000)
,(8,400,cast('2022-01-03' as date),1000)
,(9,600,cast('2022-01-03' as date),3000)
;

-----------------------------------------------------

select
    order_date as day,
    count(distinct case when rn = 1 then order_id end) as first_purchase,
    count(distinct case when rn > 1 then order_id end) as repeat_customer
from (
    select
        order_id,
        customer_id,
        order_date,
        row_number() over (partition by customer_id order by order_date) as rn
    from test.curso_orders
)a
group by order_date

-- 3- Armar una tabla que sirva como una version simplificada de un sistema de recomendacion y muestre, 
-- cuantas ordenes se llevan por cada PAR de productos.

create table test.curso_orders2(
	order_id int,
	customer_id int,
	product_id int);

insert into test.curso_orders2 VALUES 
(1, 1, 1),
(1, 1, 2),
(1, 1, 3),
(2, 2, 1),
(2, 2, 2),
(2, 2, 4),
(3, 1, 5);

create table test.curso_products (
	id int,
	name varchar(10));
	
insert into test.curso_products VALUES 
(1, 'A'),
(2, 'B'),
(3, 'C'),
(4, 'D'),
(5, 'E');

----------------------------------------------------------

select
    concat(cp1.name, cp2.name) as products,
    count(*) as order_count
from
    test.curso_orders2 co1
left join test.curso_orders2 co2 ON co1.order_id = co2.order_id
left join test.curso_products cp1 ON co1.product_id = cp1.id
left join test.curso_products cp2 ON co2.product_id = cp2.id
where
    cp1.name < cp2.name
group by
    cp1.name,
    cp2.name
