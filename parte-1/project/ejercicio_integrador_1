-- SQL Server
-- Ejercicio Integrador 1

-- Ventas brutas, netas y margen
with vid_usd as (
select 
	case when moneda = 'ARS' then venta / cotizacion_usd_peso
	when moneda = 'URU' then venta / cotizacion_usd_uru
	when moneda = 'EUR' then venta/ cotizacion_usd_eur end as venta_usd,
	case when moneda = 'ARS' then impuestos / cotizacion_usd_peso
	when moneda = 'URU' then impuestos / cotizacion_usd_uru
	when moneda = 'EUR' then impuestos / cotizacion_usd_eur end as impuestos_usd,
	case when moneda = 'ARS' then descuento / cotizacion_usd_peso
	when moneda = 'URU' then descuento / cotizacion_usd_uru
	when moneda = 'EUR' then descuento / cotizacion_usd_eur end as descuento_usd,
	costo_promedio_usd,
	datepart(MONTH,ols.fecha) as mes
	from curso_order_line_sale ols
	left join curso_monthly_average_fx_rate on datepart(MONTH,ols.fecha) = datepart(month,curso_monthly_average_fx_rate.mes)
	left join curso_cost on ols.producto = curso_cost.codigo_producto
)
select 
	mes, 
	round(sum(venta_usd),1) as ventas_brutas_usd,
	round(sum(coalesce(venta_usd,0)-coalesce(impuestos_usd,0)-coalesce(descuento_usd,0)),1) as ventas_netas_usd,
	round(sum((coalesce(venta_usd,0)-coalesce(descuento_usd,0)-coalesce(impuestos_usd,0))-coalesce(costo_promedio_usd,0)),1) as margen_usd
	from vid_usd
	group by mes

-- Margen por categoria de producto
with vid_usd as (
select 
	case when moneda = 'ARS' then venta / cotizacion_usd_peso
	when moneda = 'URU' then venta / cotizacion_usd_uru
	when moneda = 'EUR' then venta/ cotizacion_usd_eur end as venta_usd,
	case when moneda = 'ARS' then impuestos / cotizacion_usd_peso
	when moneda = 'URU' then impuestos / cotizacion_usd_uru
	when moneda = 'EUR' then impuestos / cotizacion_usd_eur end as impuestos_usd,
	case when moneda = 'ARS' then descuento / cotizacion_usd_peso
	when moneda = 'URU' then descuento / cotizacion_usd_uru
	when moneda = 'EUR' then descuento / cotizacion_usd_eur end as descuento_usd,
	costo_promedio_usd,
	datepart(MONTH,ols.fecha) as mes, 
	categoria
	from curso_order_line_sale ols
	left join curso_monthly_average_fx_rate on datepart(MONTH,ols.fecha) = datepart(month,curso_monthly_average_fx_rate.mes)
	left join curso_cost on ols.producto = curso_cost.codigo_producto
	left join curso_product_master on curso_cost.codigo_producto = curso_product_master.codigo_producto 
)
select 
	mes, 
	categoria, 
	round(sum((coalesce(venta_usd,0)-coalesce(descuento_usd,0)-coalesce(impuestos_usd,0))-coalesce(costo_promedio_usd,0)),1) as margen_usd
	from vid_usd 
	group by mes, categoria 


-- ROI por categoria de producto. ROI = ventas netas / Valor promedio de inventario
with costoinventario as 
(select 
datepart(MONTH,curso_inventory.fecha) as mes, 
curso_inventory.sku,
avg(((inicial+final)/2) * costo_promedio_usd) as costo_usd
from curso_inventory
left join curso_cost on curso_cost.codigo_producto = curso_inventory.sku
group by curso_inventory.sku, datepart(MONTH,curso_inventory.fecha)
)

, ventas_items as (
select 
	producto,
	datepart(MONTH,ols.fecha) as mes,
	sum(round(ols.venta /(case when moneda = 'ARS' then cotizacion_usd_peso
	when moneda = 'URU' then cotizacion_usd_uru
	when moneda = 'EUR' then cotizacion_usd_eur else 0 end), 1)) as venta_bruta_usd
	from curso_order_line_sale ols
	left join curso_monthly_average_fx_rate maf on datepart(MONTH,maf.mes) = datepart(MONTH,ols.fecha)
	and datepart(YEAR,maf.mes) = datepart(YEAR,ols.fecha)
	group by producto, datepart(MONTH,ols.fecha)
)

select
	coalesce(costoinventario.mes, vi.mes) as mes,
	coalesce(costoinventario.sku, vi.producto) as producto,
	sum(costo_usd) as costo_usd,
	sum(venta_bruta_usd) as venta_bruta_usd,
	sum(coalesce(venta_bruta_usd,0))/sum(costo_usd) as roi
	from costoinventario 
	full outer join ventas_items vi on costoinventario.sku = vi.producto and vi.mes = costoinventario.mes
	left join curso_product_master on coalesce(costoinventario.sku, vi.producto) = curso_product_master.codigo_producto
	where coalesce (costoinventario.mes, vi.mes) = 11 
	group by coalesce(costoinventario.mes, vi.mes), coalesce(costoinventario.sku, vi.producto)

-- AOV (Average order value), valor promedio de la orden.
with ventas_usd as ( 
select 
	case when moneda = 'ARS' then venta / cotizacion_usd_peso
	when moneda = 'URU' then venta / cotizacion_usd_uru
	when moneda = 'EUR' then venta/ cotizacion_usd_eur end as venta_usd,
	orden,
	cantidad 
	from curso_order_line_sale ols
	left join curso_monthly_average_fx_rate on datepart(MONTH,ols.fecha) = datepart(month,curso_monthly_average_fx_rate.mes)
	and datepart(YEAR,curso_monthly_average_fx_rate.mes) = datepart(YEAR,ols.fecha)
	)
select 
	orden,
	round(avg((coalesce(venta_usd,0)+coalesce(cantidad,0))/2),1) as valor_promedio_usd
	from ventas_usd 
	group by orden

-- Contabilidad
-- Impuestos pagados
with impuestos_usd as (
	select
	case when moneda = 'ARS' then impuestos / cotizacion_usd_peso
	when moneda = 'URU' then impuestos / cotizacion_usd_uru
	when moneda = 'EUR' then impuestos / cotizacion_usd_eur end as impuestos_usd,
	datepart(MONTH,ols.fecha) as mes
	from curso_order_line_sale ols
	left join curso_monthly_average_fx_rate on datepart(MONTH,ols.fecha) = datepart(month,curso_monthly_average_fx_rate.mes)
	)
select round(sum(impuestos_usd),1) as impuestos_pagados_usd, mes
from impuestos_usd 
group by mes 

-- Tasa de impuesto. Impuestos / Ventas netas
with vi_usd as (
select 
	case when moneda = 'ARS' then venta / cotizacion_usd_peso
	when moneda = 'URU' then venta / cotizacion_usd_uru
	when moneda = 'EUR' then venta/ cotizacion_usd_eur end as venta_usd,
	case when moneda = 'ARS' then impuestos / cotizacion_usd_peso
	when moneda = 'URU' then impuestos / cotizacion_usd_uru
	when moneda = 'EUR' then impuestos / cotizacion_usd_eur end as impuestos_usd,
	case when moneda = 'ARS' then descuento / cotizacion_usd_peso
	when moneda = 'URU' then descuento / cotizacion_usd_uru
	when moneda = 'EUR' then descuento / cotizacion_usd_eur end as descuento_usd,
	datepart(MONTH,ols.fecha) as mes
	from curso_order_line_sale ols
	left join curso_monthly_average_fx_rate on datepart(MONTH,ols.fecha) = datepart(month,curso_monthly_average_fx_rate.mes)
	)
select 
	mes,
	round(sum(coalesce(impuestos_usd,0)) / sum(coalesce(venta_usd,0)-coalesce(impuestos_usd,0)-coalesce(descuento_usd,0)),2) as tasa_impuesto_usd
	from vi_usd 
	group by mes 

-- Cantidad de creditos otorgados
select count(creditos) cantidad_creditos
from curso_order_line_sale

-- Valor pagado final por order de linea. Valor pagado: Venta - descuento + impuesto - credito
with vidc_usd as (
select 
	case when moneda = 'ARS' then venta / cotizacion_usd_peso
	when moneda = 'URU' then venta / cotizacion_usd_uru
	when moneda = 'EUR' then venta/ cotizacion_usd_eur end as venta_usd,
	case when moneda = 'ARS' then impuestos / cotizacion_usd_peso
	when moneda = 'URU' then impuestos / cotizacion_usd_uru
	when moneda = 'EUR' then impuestos / cotizacion_usd_eur end as impuestos_usd,
	case when moneda = 'ARS' then descuento / cotizacion_usd_peso
	when moneda = 'URU' then descuento / cotizacion_usd_uru
	when moneda = 'EUR' then descuento / cotizacion_usd_eur end as descuento_usd,
	case when moneda = 'ARS' then creditos / cotizacion_usd_peso
	when moneda = 'URU' then creditos / cotizacion_usd_uru
	when moneda = 'EUR' then creditos / cotizacion_usd_eur end as creditos_usd,
	datepart(MONTH,ols.fecha) as mes,
	orden
	from curso_order_line_sale ols
	left join curso_monthly_average_fx_rate on datepart(MONTH,ols.fecha) = datepart(month,curso_monthly_average_fx_rate.mes)
	)
select 
	orden, 
	round(sum(coalesce(venta_usd,0)-coalesce(descuento_usd,0)+coalesce(impuestos_usd,0)-coalesce(creditos_usd,0)),1) as valor_pagado_final_usd
	from vidc_usd
	group by orden 

-- Supply Chain

-- Costo de inventario promedio por tienda
select tienda, round(avg(((inicial+final)/2) * costo_promedio_usd),1) as costo_inventario_promedio_usd
from curso_inventory
left join curso_cost on curso_inventory.sku = curso_cost.codigo_producto
group by tienda 

-- Costo del stock de productos que no se vendieron por tienda
with productos_no_vendidos as (select codigo_producto as pnv, tienda
from curso_product_master pm 
left join curso_order_line_sale ols on ols.producto = pm.codigo_producto
where ols.venta is null)

, stock as (select sku, round(avg((inicial+final)/2),0) as stock
from curso_inventory
group by sku)

select tienda, codigo_producto, (stock * costo_promedio_usd) as costo_stock_no_vendidos
from curso_cost c
left join  productos_no_vendidos pnv on c.codigo_producto = pnv.pnv
left join stock on c.codigo_producto = stock.sku
group by tienda, codigo_producto, (stock * costo_promedio_usd)

-- Cantidad y costo de devoluciones

select sum(cantidad) as cantidad_devoluciones, sum(costo_promedio_usd) as costo_devoluciones_usd
from curso_return_movements rm
left join curso_cost on rm.item = curso_cost.codigo_producto

-- Tiendas

-- Ratio de conversion. Cantidad de ordenes generadas / Cantidad de gente que entra
with ordenes_generadas as (
select tienda, count(distinct orden) as cantidad_ordenes_generadas
from curso_order_line_sale 
group by tienda
)

, gente_entra as (
select tienda, round(coalesce(avg(conteo),0),0) as promedio_entradas
from curso_super_store_count
group by tienda 
)

select og.tienda as tiendas_ordenes_generadas, ge.tienda as tiendas_entradas, promedio_entradas, cantidad_ordenes_generadas, 
round(cantidad_ordenes_generadas / promedio_entradas, 4) as ratio
from gente_entra ge
full outer join ordenes_generadas og on ge.tienda = og.tienda

-- Preguntas de entrevistas 

-- 1- Como encuentro duplicados en una tabla. Dar un ejemplo mostrando duplicados de la columna orden en la tabla de ventas.
select orden, count(orden) as cantidad_orden
from curso_order_line_sale
group by orden 
having count(orden) > 1

-- 2- Como elimino duplicados?
-- Con un row number, rankeas los registros particionando por toda la fila y los mayores a 1 no los contaspero en este caso hay que tener en cuenta que es y que no es un repetido.
-- Otra forma es utilizar la cláusula count + distinct.

-- 3- Cual es la diferencia entre UNION y UNION ALL.
-- UNION devuelve sólo los valores distintos del conjunto de resultados de dos o más sentencias, mientras que UNION ALL devuelve todos los valores, incluidos los duplicados.

-- Como encuentro registros en una tabla que no estan en otra tabla. Para probar podes crear dos tablas con una unica columna id que 
-- tengan valores: Tabla 1: 1,2,3,4 Tabla 2: 3,4,5,6

select coalesce(tabla_1.id, tabla_2.id) as tabla
from tabla_1
full outer join tabla_2 on tabla_1.id = tabla_2.id 
where tabla_1.id is null or tabla_2.id is null

-- Cual es la diferencia entre INNER JOIN y LEFT JOIN. (podes usar la tabla anterior)
-- INNER JOIN devuelve los registros comunes entre las dos tablas. Con este ejemplo Tabla 1: 1,2,3,4 Tabla 2: 3,4,5,6; traería el 3 y 4 de ambas.
-- En cambio LEFT JOIN devuelve todos los registros de la primer tabla y los comunes con la segunda tabla. Con este ejemplo Tabla 1: 1,2,3,4 Tabla 2: 3,4,5,6; traería de la Tabla 1: 1,2,3,4 y 3,4 de la Tabla 2.
